Script started on Fri 10 Apr 2015 01:36:13 AM EDT
]0;nsb2@cray: ~/CS112/proj07nsb2@cray:~/CS112/proj07$ ls
[0m[01;34mDebug[0m  encoded.txt  main.cpp  original.txt  StackException.h  Stack.h  StackTester.cpp  StackTester.h  typescript
]0;nsb2@cray: ~/CS112/proj07nsb2@cray:~/CS112/proj07$ cat main.cpp StackException.h Stack.h StackTester.cpp StackTester.h
/* tester.cpp is a "driver" to run the tests in the StackTester class.
 * Joel Adams, for CS 112 at Calvin College.
 */
 
#include "StackTester.h"
#include "Stack.h"
#include "StackException.h"
#include <cassert>
#include <cctype>
#include <stdexcept>
#include <cstdlib>

using namespace std;

/* Method that both tests the Stack functions and encodes a message from a txt file.
 * Parameter: None
 */
void tester() {
	StackTester st;
	st.runTests();
}

int main() {
	tester();

	ifstream fin;
	ofstream fout;
	string line;
	Stack<char> current(1);
	unsigned counter;

	fin.open("original.txt");
	assert( fin.is_open() == true);
	fout.open("encoded.txt");
	assert( fout.is_open() == true);

	while(getline(fin , line)) {
		for (unsigned i = 0 ; i < line.length() ; i++) {
			if (
					isspace(line.at(i)) == false
					&& line.at(i) != ','
					&& line.at(i) != '.'
					&& line.at(i) != '!')
			{
				try {
					current.push(line.at(i));
					counter ++;
				}
				catch(StackException&) { // all inclusive catch() method that catches any and all exceptions
					current.setCapacity(current.getCapacity()*2);
					current.push(line.at(i));
					counter ++;
				}
			}
			else {
				try {
					while (counter > 0){
						fout << current.pop();
						counter --;
					}
					fout << line.at(i);
				}
				catch(...) {

				}
			}
		}
	}
	cout << "File 'original.txt' has been encoded and outputted to 'encoded.txt.'" ;
}





/* StackException.h models exceptions in stack operations.
 * Joel Adams, for CS 112 at Calvin College.
 * Student Name:
 * Date:
 */

#ifndef STACK_EXCEPTION
#define STACK_EXCEPTION

#include <iostream>
using namespace std;

 
class StackException {
public:
   StackException(const string& whereThrown,
                  const string& message) { 
       myLocation = whereThrown; 
       myMessage = message; 
   }

   string asString() const {
       return "*** StackException in " +
               myLocation + ": " + myMessage; 
   }

private:
   string myLocation;
   string myMessage;
};  // StackException


/* Function to allow a StackException (or a subclass) to be displayed
 * via an ostream.
 * Parameters: out, an ostream;
 *             se, a StackException.
 * Postcondition: the string representation of se has been inserted
 * into out
 *             && return-value == out.
 */
inline ostream& operator<<(ostream& out, const StackException& se) {
      out << se.asString();
      return out;
}

#endif

/* Stack.h provides a (dynamic-array-based) Stack class.
 * Joel Adams, for CS 112 at Calvin College.
 * Student Name:
 * Date:
 * 
 * Invariant: myTop == 0 && isEmpty() && !isFull()
 *         || myTop == myCapacity && !isEmpty() && isFull()
 *         || myTop > 0 && myTop < myCapacity && !isEmpty() && !isFull().
 * Notes: 
 * 1. Member myTop always contains the index of the next empty space in myArray
 *        (the index of the array element into which the next pushed item will be placed).
 * 2. Sending push() to a full Stack throws the exception Stack::Overflow.
 * 3. Sending pop() or getTop() to an empty Stack throws the exception Stack::Underflow.
 */

#ifndef STACK_H_
#define STACK_H_

//#include "StackException.h"
#include <string>
#include <iostream>
#include "StackException.h"
#include <cctype>
#include <fstream>
using namespace std;

typedef int Item;

template<class Item>

class Stack {
public:
	Stack(unsigned size);
	Stack(const Stack& original);
	~Stack();
	Stack& operator=(const Stack& original);
	bool isEmpty();
	bool isFull();
	void push(const Item& it);
	Item getTop() const;
	Item pop();
	unsigned getSize() const {return myTop;};
	unsigned getCapacity () const {return myCapacity;};
	void setCapacity(unsigned cap);
	void decode(ifstream fin);
	
protected:
	void makeCopyOf(const Stack& original);
	
private:
	unsigned myCapacity;
	unsigned myTop;
	Item*    myArray;
	friend class StackTester;
};

/* explicit-value constructor
 * Parameter: size, an unsigned value.
 * Precondition: size > 0.
 * Postcondition: myTop == 0 && myCapacity == size
 *              && myArray contains the address of a dynamic array of 'size' entries.
 */
template<class Item>
Stack<Item>::Stack(unsigned size) {
	if (size > 0) {
		myTop = 0;
		myCapacity = size;
		myArray = new Item[size];
	}
	else {
		throw StackException("Stack(size)","size must be positive!");
	}
}

/* copy constructor
 * Parameter: original, a Stack (const reference).
 * Postcondition: I am a copy of original.
 */
template<class Item>
Stack<Item>::Stack(const Stack& original) {
	makeCopyOf(original);
}

/* utility method containing code refactored from
 *  the copy constructor and operator=.
 * Parameter: original, a Stack (const reference).
 * Postcondition: I am a copy of original.
 */
template<class Item>
void Stack<Item>::makeCopyOf(const Stack& original) {
	myCapacity = original.myCapacity;
	myArray = new Item[myCapacity];

	for (unsigned i = 0; i < myCapacity; i++) {
		myArray[i] = original.myArray[i];
	}
	myTop = original.myTop;
}

/* destructor
 * Postcondition: myCapacity == 0 && myTop == 0
 *             && myArray has been deallocated.
 */
template<class Item>
Stack<Item>::~Stack() {
	delete [] myArray;
	myArray = NULL;
	myCapacity = 0;
	myTop = 0;
}

/* assignment operator
 * Parameter: original, a Stack (const reference).
 * Postcondition: I am a copy of original
 *              && I have been returned.
 */
template<class Item>
Stack<Item>& Stack<Item>::operator=(const Stack& original) {
	if (this != &original) {
		delete [] myArray;
		makeCopyOf(original);
	}
	return *this;
}

template<class Item>
bool Stack<Item>::isEmpty() {
	if (myTop == 0) {
		return true;
	}
	else {
		return false;
	}
}

template<class Item>
bool Stack<Item>::isFull() {
	if (myTop == myCapacity) {
		return true;
	}
	else {
		return false;
	}
}

template<class Item>
void Stack<Item>::push(const Item& it) {
	if (isFull() == false) {
		myArray[myTop] = it;
		myTop ++;
	}
	else {
		throw StackException("push()", "stack is full!");
	}
}

template<class Item>
Item Stack<Item>::getTop() const {
	if (myTop > 0) {
		return myArray[myTop - 1];
	}
	else {
		throw StackException("getTop()", "stack is empty!");
	}
}

template<class Item>
Item Stack<Item>::pop() {
	if (myTop > 0) {
		myTop--;
		return myArray[myTop];
	}
	else {
		throw StackException("pop()", "stack is empty!");
	}
}

template<class Item>
void Stack<Item>::setCapacity(unsigned cap) {
	Item * newArray;
	newArray = new Item[cap];
	if (myCapacity < cap) {
		for (unsigned i = 0 ; i < myCapacity ; i++) {
			newArray[i] = myArray[i];
		}
		for (unsigned j = myCapacity ; j < cap ; j++) {
			newArray[j] = 0;
		}
	}
	else {
		for (unsigned i = 0 ; i < cap ; i++) {
			newArray[i] = myArray[i];
		}
		if (myTop > cap) {
			myTop = cap;
		}
	}
	delete [] myArray;
	myArray = newArray;
	myCapacity = cap;
}

#endif

/* StackTester.cpp defines test-methods for the 
 *  dynamically allocated (array) Stack operations
 * Joel Adams, for CS 112 at Calvin College
 */

#include "StackTester.h"
#include "Stack.h"
#include <iostream>  // cout, cerr, ...
#include <cassert>   // assert()
#include <cstdlib>   // exit()
using namespace std;

void StackTester::runTests() {
	cout << "Testing Stack class..." << endl;
	testConstructor();
	testIsEmpty();
	testPushAndIsFull();
	testGetTop();
	testPop();
	testGetSize();
	testGetCapacity();
	testSetCapacity();
	testCopyConstructor();
	testAssignment();
	testDestructor();
	cout << "All tests passed!" << endl;
}

void StackTester::testConstructor() {
	cout << "- Testing constructor... " << flush;
	// invalid parameter
	try {
		Stack<Item> s1(0);
		cerr << "\nConstructed stack of size 0\n";
		exit(1);
	} catch (StackException& se) {
		cout << se << flush;
	}
	cout << " 1 " << flush;
	// valid parameter
	Stack<Item> s2(3);
	cout << " 2 " << flush;
	cout << " Passed!" << endl;
}

void StackTester::testIsEmpty() {
	cout << "- Testing isEmpty()... " << flush;
	// capacity 1
	Stack<Item> s1(1);
	assert( s1.isEmpty() );
	cout << " 1 " << flush;
	// capacity > 1
	Stack<Item> s2(3);
	assert( s2.isEmpty() );
	cout << " 2 " << flush;
	cout << " Passed!" << endl;
}


void StackTester::testPushAndIsFull() {
	cout << "- Testing push()... " << flush;
	// test with capacity 1
	Stack<Item> s1(1);
	s1.push(11);
	assert( !s1.isEmpty() );
	assert( s1.isFull() );
	try {
		s1.push(22);
		cerr << "\npush() worked on a full stack (size 1)\n";
		exit(1);
	} catch (StackException& se) {
		cout << " 1 " << flush;
	}
	// test with capacity > 1
	Stack<Item> s2(3);
	s2.push(11);
	s2.push(22);
	s2.push(33);
	try {
		s2.push(44);
		cerr << "\npush() worked on a full stack (size 3)\n";
		exit(1);
	} catch (StackException& se) {
		cout << " 2 " << flush;
	}
	cout << " Passed! " << endl;
}

void StackTester::testGetTop() {
	cout << "- Testing getTop()... " << flush;
	// test with empty stack
	Stack<Item> s1(1);
	try {
		s1.getTop();
		cerr << "\ngetTop() worked on empty stack\n";
		exit(1);
	} catch (StackException& se) {
		cout << se << flush;
 		cout << " 1 " << flush;
	}
	// test with capacity 1
	Stack<Item> s2(1);
	s2.push(11);
	assert( s2.getTop() == 11 );
	cout << " 2 " << flush;
	// test with capacity > 1
	Stack<Item> s3(3);
	s3.push(11);
	assert( s3.getTop() == 11 );
	s3.push(22);
	assert( s3.getTop() == 22 );
	s3.push(33);
	assert( s3.getTop() == 33 );
	cout << " 3 " << flush;
	cout << " Passed! " << endl;
}

void StackTester::testPop() {
	cout << "- Testing pop()... " << flush;
	// try empty, capacity 1
	Stack<Item> s1(1);
	assert( s1.isEmpty() );
	try {
		s1.pop();
		cerr << "\npop() worked on empty stack (size 1)\n";
		exit(1);
	} catch (StackException& se) {
		cout << " 1 " << flush;
	}
	// try empty, capacity > 1
	Stack<Item> s2(3);
	try {
		s2.pop();
		cerr << "\npop() worked on empty stack (size 3)\n";
		exit(1);
	} catch (StackException& se) {
		cout << " 2 " << flush;
	}
	// try non-empty, capacity 1
	Stack<Item> s3(1);
	s3.push(11);
	assert( s3.getTop() == 11 );
	assert( s3.pop() == 11 );
	try {
		s3.pop();
		cerr << "\ns3.pop() worked on empty stack (size 1)\n";
		exit(1);
	} catch (StackException& se) {
		cout << " 3 " << flush;
	}
	// try non-empty, capacity > 1
	Stack<Item> s4(3);
	s4.push(11);
	s4.push(22);
	s4.push(33);
	assert( s4.getTop() == 33 );
	assert( s4.pop() == 33 );
	assert( s4.getTop() == 22 );
	assert( s4.pop() == 22 );
	assert( s4.getTop() == 11 );
	assert( s4.pop() == 11 );
	try {
		s4.pop();
		cerr << "\ns4.pop() worked on empty stack (size 3)\n";
		exit(1);
	} catch (StackException& se) {
		cout << " 4 " << flush;
	}
	cout << " Passed!" << endl;
}

void StackTester::testGetSize() {
	cout << "- Testing getSize()... " << flush;
	// Testing a stack with a size of 5
	Stack<Item> s1(5);
	for (unsigned i = 1 ; i < 6 ; i++) {
		s1.push((i*11));
	}
	assert( s1.getSize() == 5 );
	cout << " 1 " << flush;
	Stack<Item> s2(10);
	for (unsigned i = 1 ; i < 11 ; i++) {
		s2.push((i*11));
	}
	assert( s2.getSize() == 10 );
	cout << " 2 " << flush;
	cout << " Passed!" << endl;
}

void StackTester::testGetCapacity() {
	cout << "- Testing getCapacity()... " << flush;
	// Testing getCapacity() with a capacity of 1
	Stack<Item> s1(1);
	assert( s1.getCapacity() == 1 );
	cout << " 1 " << flush;
	// Testing getCapacity() with a capacity of 10
	Stack<Item> s2(10);
	assert( s2.getCapacity() == 10 );
	cout << " 2 " << flush;
	cout << " Passed!" << endl;
}

void StackTester::testSetCapacity() {
	cout << "- Testing setCapacity()... " << flush;
	// Testing setCapacity() to a capacity smaller than the original (From 10 to 5)
	Stack<Item> s1(10);
	for (unsigned i = 0 ; i < 10 ; i++) {
		s1.push((i+1)*11);
	}
	s1.setCapacity(5);
	assert( s1.myCapacity == 5 );
	assert( s1.isFull() == true );
	assert( s1.pop() == 55);
	cout << " 1 " << flush;
	cout << " Passed!" << endl;
	// Testing setCapacity() to a capacity larger than the original (From 5 to 10)
	Stack<Item> s2(5);
	for (unsigned i = 0 ; i < 5 ; i++) {
		s2.push((i+1)*11);
	}
	assert( s2.isFull() == true );
	s2.setCapacity(10);
	assert( s2.myCapacity == 10 );
	assert( s2.isFull() == false );
	assert( s2.pop() == 55);
}

void StackTester::testCopyConstructor() {
	cout << "- Testing copy constructor... " << flush;
	// minimal empty Stack
	Stack<Item> s1(1);
	Stack<Item> s2(s1);
	assert( s2.isEmpty() );
	assert( s2.myArray != NULL );
	assert( s2.myCapacity == 1 );
	assert( s2.myArray != s1.myArray );
	cout << " 1 " << flush;
	// minimal non-empty Stack
	Stack<Item> s3(1);
	s3.push(11);
	Stack<Item> s4(s3);
	assert( !s4.isEmpty() );
	assert( s4.isFull() );
	assert( s4.getTop() == 11 );
	assert( s4.myArray != s3.myArray );
	cout << " 2 " << flush;
	// non-minimal, non-empty stack
	Stack<Item> s5(3);
	s5.push(11);
	s5.push(22);
	s5.push(33);
	Stack<Item> s6(s5);
	assert( s6.myCapacity = s5.myCapacity );
	assert( s6.myTop == s5.myTop );
	assert( s6.myArray != s5.myArray );
	assert( s6.pop() == 33 );
	assert( s6.pop() == 22 );
	assert( s6.pop() == 11 );
	assert( s5.getTop() == 33 );
	cout << " 3 " << flush;
	cout << "Passed!" << endl;
}

void StackTester::testAssignment() {
	cout << "- Testing assignment... " << flush;
	// minimal empty Stacks, same size
	Stack<Item> s1(1);
	Stack<Item> s2(1);
	s2 = s1;
	assert( s2.isEmpty() );
	assert( s2.myArray != NULL );
	assert( s2.myArray != s1.myArray );
	assert( s2.myCapacity == 1 );
	cout << " 1 " << flush;
	// minimal non-empty Stack to empty Stack, same capacity
	Stack<Item> s3(1);
	s3.push(11);
	Stack<Item> s4(1);
	s4 = s3;
	assert( !s4.isEmpty() );
	assert( s4.isFull() );
	assert( s4.getTop() == 11 );
	assert( s4.myArray != s3.myArray );
	cout << " 2 " << flush;
	// minimal empty stack to non-empty stack, same capacity
	Stack<Item> s5(1);
	Stack<Item> s6(1);
	s6.push(11);
	s6 = s5;
	assert( s6.isEmpty() );
	assert( s6.myArray != NULL );
	assert( s6.myArray != s5.myArray );
	assert( s6.myCapacity == 1 );
	cout << " 3 " << flush;
	// non-minimal non-empty stack to empty stack, different capacities
	Stack<Item> s7(3);
	s7.push(11);
	s7.push(22);
	s7.push(33);
	Stack<Item> s8(2);
	s8 = s7;
	assert( s8.myArray != s7.myArray );
	assert( s8.myCapacity == s7.myCapacity );
	assert( s8.myTop == s7.myTop );
	assert( s8.pop() == 33 );
	assert( s8.pop() == 22 );
	assert( s8.pop() == 11 );
	assert( s7.getTop() == 33 );
	cout << " 4 " << flush;
	// non-minimal, empty stack to non-empty stack, different capacities
	Stack<Item> s9(2);
	Stack<Item> s10(3);
	s10.push(11);
	s10.push(22);
	s10.push(33);
	s10 = s9;
	assert( s10.isEmpty() );
	assert( s10.myArray != s9.myArray );
	assert( s10.myCapacity == s10.myCapacity );
	cout << " 5 " << flush;
	// self-assignment, minimal size
	Stack<Item> s11(1);
	s11.push(11);
	s11 = s11;
	assert( s11.isFull() );
	assert( !s11.isEmpty() );
	cout << " 6 " << flush;
	// chaining
	Stack<Item> s12(2);
	s12.push(11);
	s12.push(22);
	Stack<Item> s13(1);
	Stack<Item> s14(1);
	s14 = s13 = s12;
	assert( s14.isFull() );
	assert( s14.myArray != s13.myArray );
	assert( s14.myArray != s12.myArray );
	assert( s14.pop() == 22 );
	assert( s14.pop() == 11 );
	assert( s14.isEmpty() );
	cout << " 7 " << flush;
      // self-assignment, non-minimal size
      s13 = s13;
	assert( !s13.isEmpty() );
	assert( s13.isFull() );
	assert( s13.pop() == 22 );
	assert( s13.pop() == 11 );
	assert( s13.isEmpty() );
	cout << " 8 " << flush;
	cout << "Passed!" << endl;
}

void StackTester::testDestructor() {
	cout << "- Testing destructor..." << flush;
	// minimal, empty
	Stack<Item> s1(1);
	s1.~Stack();
	assert( s1.isEmpty() );
	assert( s1.myArray == NULL );
	assert( s1.myCapacity == 0 );
	cout << " 1 " << flush;
	// minimal, non-empty
	Stack<Item> s2(1);
	s2.push(11);
	s2.~Stack();
	assert( s2.isEmpty() );
	assert( s2.myArray == NULL );
	assert( s2.myCapacity == 0 );
	cout << " 2 " << flush;
	// non-minimal, empty
	Stack<Item> s3(3);
	s3.~Stack();
	assert( s3.isEmpty() );
	assert( s3.myArray == NULL );
	assert( s3.myCapacity == 0 );
	cout << " 3 " << flush;
	// non-minimal, non-empty
	Stack<Item> s4(3);
	s4.push(11);
	s4.push(22);
	s4.push(33);
	s4.~Stack();
	assert( s4.isEmpty() );
	assert( s4.myArray == NULL );
	assert( s4.myCapacity == 0 );
	cout << " 4 " << flush;
	cout << " Passed!" << endl;
}



/* StackTester.h declares a test-class for a dynamically allocated (array) Stack.
 * Joel Adams, for CS 112 at Calvin College
 */

#ifndef STACKTESTER_H_
#define STACKTESTER_H_


class StackTester {
public:
	void runTests();
	void testConstructor();
	void testIsEmpty();
	void testPushAndIsFull();
	void testGetTop();
	void testPop();
	void testGetSize();
	void testCopyConstructor();
	void testAssignment();
	void testDestructor();
	void testGetCapacity();
	void testSetCapacity();
	void testDecode();
};

#endif /*STACKTESTER_H_*/

]0;nsb2@cray: ~/CS112/proj07nsb2@cray:~/CS112/proj07$ cd Debug
]0;nsb2@cray: ~/CS112/proj07/Debugnsb2@cray:~/CS112/proj07/Debug$ make all
make: Nothing to be done for `all'.
]0;nsb2@cray: ~/CS112/proj07/Debugnsb2@cray:~/CS112/proj07/Debug$ cd ..
]0;nsb2@cray: ~/CS112/proj07nsb2@cray:~/CS112/proj07$ ./Debug/proj07
Testing Stack class...
- Testing constructor... *** StackException in Stack(size): size must be positive! 1  2  Passed!
- Testing isEmpty()...  1  2  Passed!
- Testing push()...  1  2  Passed! 
- Testing getTop()... *** StackException in getTop(): stack is empty! 1  2  3  Passed! 
- Testing pop()...  1  2  3  4  Passed!
- Testing getSize()...  1  2  Passed!
- Testing getCapacity()...  1  2  Passed!
- Testing setCapacity()...  1  Passed!
- Testing copy constructor...  1  2  3 Passed!
- Testing assignment...  1  2  3  4  5  6  7  8 Passed!
- Testing destructor... 1  2  3  4  Passed!
All tests passed!
File 'original.txt' has been encoded and outputted to 'encoded.txt.']0;nsb2@cray: ~/CS112/proj07nsb2@cray:~/CS112/proj07$ exit

Script done on Fri 10 Apr 2015 01:38:37 AM EDT
